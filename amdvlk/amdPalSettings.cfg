//Runtime Settings
ShaderCacheMode 2          //Runtime cache is the default mode. For "cache to disk", the cache file is generated under $AMD_SHADER_DISK_CACHE_PATH/AMD/LlpcCache or $XDG_CACHE_HOME/AMD/LlpcCache or $HOME/.cache/AMD/LlpcCache
//IFH 0                    //Infinitely Fast Hardware. Submit calls are dropped before being sent to hardware. Useful for measuring CPU-limited performance.
//EnableVmAlwaysValid 1    //1 is the default setting which enables the VM-always-valid feature for kernel 4.16 and above. The feature can reduce command buffer submission overhead related to virtual memory management.
//IdleAfterSubmitGpuMask 0 //Forces the CPU to immediately wait for each GPU submission to complete on the specified set of GPUs.

//PAL GpuProfiler Layer
//GpuProfilerMode 0                        //Enables and sets the SQTT mode for the GPU performance profiler layer. Actual capture of performance data must be specified via frame number with GpuProfilerConfig_StartFrame or by pressing shift-F11.
//GpuProfilerConfig.LogDirectory           //The directory path is relative to $AMD_DEBUG_DIR or $TMPDIR or /var/tmp/, default value is "amdpal/". Your application must have write permissions to the directory. The profiling logs are output to a subdirectory that is named in the format like <AppName><yyyy-MM-dd><HH:mm:ss>.
//GpuProfilerConfig.Granularity 0          //Defines what is measured/profiled. Per-draw times individual commands (such as draw, dispatch, etc.) inside command buffers, while per-cmdbuf only profiles entire command buffers in aggregate.
//GpuPtofilerConfig.StartFrame 1           //First frame to capture data for. If StartFrame and FrameCount are not set, all frames will be profiled.
//GpuProfilerConfig.FrameCount 1           //Number of frames to capture data for.
//GpuProfilerConfig.RecordPipelineStats 0  //Gathers pipeline statistic query data per entry if enabled.

//PAL Debug Overlay
DebugOverlayEnabled 0                       //Enables the debug overlay.
DebugOverlayConfig.DebugOverlayLocation 0   //Determines where the overlay text should be displayed. Can be used to avoid collision with important rendering by the application.
DebugOverlayConfig.PrintFrameNumber 1       //Reports the current frame number. Useful when determining a good frame range for profiling with the GpuProfiler layer.
DebugOverlayConfig.TimeGraphEnabl 1         //Enables rendering of a graph of recent CPU and GPU frame times.
